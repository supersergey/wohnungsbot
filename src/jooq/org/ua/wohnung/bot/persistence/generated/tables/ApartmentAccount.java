/*
 * This file is generated by jOOQ.
 */
package org.ua.wohnung.bot.persistence.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.ua.wohnung.bot.persistence.generated.Keys;
import org.ua.wohnung.bot.persistence.generated.Main;
import org.ua.wohnung.bot.persistence.generated.tables.records.ApartmentAccountRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApartmentAccount extends TableImpl<ApartmentAccountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>main.apartment_account</code>
     */
    public static final ApartmentAccount APARTMENT_ACCOUNT = new ApartmentAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApartmentAccountRecord> getRecordType() {
        return ApartmentAccountRecord.class;
    }

    /**
     * The column <code>main.apartment_account.account_id</code>.
     */
    public final TableField<ApartmentAccountRecord, Long> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>main.apartment_account.apartment_id</code>.
     */
    public final TableField<ApartmentAccountRecord, String> APARTMENT_ID = createField(DSL.name("apartment_id"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>main.apartment_account.apply_ts</code>.
     */
    public final TableField<ApartmentAccountRecord, OffsetDateTime> APPLY_TS = createField(DSL.name("apply_ts"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private ApartmentAccount(Name alias, Table<ApartmentAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private ApartmentAccount(Name alias, Table<ApartmentAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>main.apartment_account</code> table reference
     */
    public ApartmentAccount(String alias) {
        this(DSL.name(alias), APARTMENT_ACCOUNT);
    }

    /**
     * Create an aliased <code>main.apartment_account</code> table reference
     */
    public ApartmentAccount(Name alias) {
        this(alias, APARTMENT_ACCOUNT);
    }

    /**
     * Create a <code>main.apartment_account</code> table reference
     */
    public ApartmentAccount() {
        this(DSL.name("apartment_account"), null);
    }

    public <O extends Record> ApartmentAccount(Table<O> child, ForeignKey<O, ApartmentAccountRecord> key) {
        super(child, key, APARTMENT_ACCOUNT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Main.MAIN;
    }

    @Override
    public UniqueKey<ApartmentAccountRecord> getPrimaryKey() {
        return Keys.APARTMENT_ACCOUNT_PKEY;
    }

    @Override
    public List<ForeignKey<ApartmentAccountRecord, ?>> getReferences() {
        return Arrays.asList(Keys.APARTMENT_ACCOUNT__APARTMENT_ACCOUNT_ACCOUNT_ID_FKEY, Keys.APARTMENT_ACCOUNT__APARTMENT_ACCOUNT_APARTMENT_ID_FKEY);
    }

    private transient Account _account;
    private transient Apartment _apartment;

    /**
     * Get the implicit join path to the <code>main.account</code> table.
     */
    public Account account() {
        if (_account == null)
            _account = new Account(this, Keys.APARTMENT_ACCOUNT__APARTMENT_ACCOUNT_ACCOUNT_ID_FKEY);

        return _account;
    }

    /**
     * Get the implicit join path to the <code>main.apartment</code> table.
     */
    public Apartment apartment() {
        if (_apartment == null)
            _apartment = new Apartment(this, Keys.APARTMENT_ACCOUNT__APARTMENT_ACCOUNT_APARTMENT_ID_FKEY);

        return _apartment;
    }

    @Override
    public ApartmentAccount as(String alias) {
        return new ApartmentAccount(DSL.name(alias), this);
    }

    @Override
    public ApartmentAccount as(Name alias) {
        return new ApartmentAccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApartmentAccount rename(String name) {
        return new ApartmentAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApartmentAccount rename(Name name) {
        return new ApartmentAccount(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, OffsetDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
